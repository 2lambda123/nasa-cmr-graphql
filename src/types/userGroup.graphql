type UserGroup {
  "The unique id assigned to the user group."
  groupId: String!

  "The UID of the application that created the user group."
  appUid: String

  "The client ID of the application that created the user group."
  clientId: String

  "Name of the user group."
  name: String!

  "Description of the user group."
  description: String

  "Is the user group shared."
  sharedUserGroup: Boolean

  "Who created the user group."
  createdBy: String

  "Tag for the user group."
  tag: String
}

type UserGroupList {
  "The number of hits for a given search."
  count: Int

  "The list of user group search results."
  items: [UserGroup]
}

input UserGroupsInput {
  "Parameter used to search for user groups by name. Group names are comprised of letters and numbers with no spaces. Any group matching the passed in string will be returned."
  name: String

  "Parameter used to search for user groups by user ids. Multiple user ids can be passed as a comma separated string or as an array. A group containing all users passed in will be returned."
  userIds: [String]

  "Parameter used to search for user groups by tags. Multiple tags can be passed as a comma separated string or as an array. A group that matches any of the tags passed in will be returned."
  tags: [String]
}

input UserGroupInput {
  "This value can either be group_id or the group name."
  userGroupIdOrName: String!

  "Parameter used with the GET/DELETE request form to return a group or delete a group that is shared."
  sharedUserGroup: String

  "Parameter used to access a user group. Unless this parameter is supplied, a user group matching the name without the tag is returned."
  tag: String
}

type Query {
  userGroups (
    "User groups query parameters"
    params: UserGroupsInput
  ): UserGroupList!

  userGroup (
    params: UserGroupInput
  ): UserGroup
}

type Mutation {
  createUserGroup (
    "Required parameter used to set the name of the user group. Group names are limited to having letters, numbers, periods, spaces, dashes, and underscores."
    name: String!

    "Optional parameter used set a description of the user group. Unless this parameter is supplied, the description will be empty."
    description: String

    "Optional parameter used set a tag for the user group. Unless this parameter is supplied, the tag will be empty."
    tag: String

    "Optional parameter used set the shared parameter in the user group. Unless this parameter is supplied, the shared_user_group will be false by default."
    sharedUserGroup: String

    "Optional parameter used set the list of members assigned to the group. Values should be a string containing a comma-delimited list of members. Unless this parameter is supplied, the members list will be empty by default."
    members: String
  ): UserGroup!

  deleteUserGroup (
    "The unique id assigned to the user group."
    id: String!
  ): Boolean!

  updateUserGroup (
    "This value can either be group_id or the user group name."
    userGroupIdOrName: String!

    "Parameter used with the GET/DELETE request form to return a user group or delete a user group that is shared."
    sharedUserGroup: String

    "Parameter used to access a user group. Unless this parameter is supplied, a user group matching the name without the tag is returned."
    tag: String

    "The new name of the user group."
    name: String

    "The new description of the user group."
    description: String

    "The new tag of the user group."
    newTag: String

    "The new user group members"
    members: String
  ): UserGroup!
}
